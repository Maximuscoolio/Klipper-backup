

[gcode_macro M600]
description: Change filament
gcode:
    {% set X = params.X|default(20)|float %}
    {% set Y = params.Y|default(10)|float %}
    {% set Z = params.Z|default(5)|float %}
    {% set E = params.E|default(85)|float %}
    SAVE_GCODE_STATE NAME=change_filament_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F10000
    G91
    G1 E-{E} F2000
    RESTORE_GCODE_STATE NAME=change_filament_state
    CLEAN_NOZZLE

[gcode_macro Load]
description: Load filament
gcode:
    G91
    G1 E400 F500
    
[gcode_macro Start_up]
description: Start before printing
gcode:
   G91
   G28
   G1 X117.5 Y117.5
   SET_HEATER_TEMPERATURE HEATER=extruder TARGET=220
   SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=60

#  [gcode_macro PRINT_END]
#gcode:
  G1 Z235
  G1 X5 Y{print_bed_max[1]*0.85} F{travel_speed*60} ; present print
  M140 S0 ; turn off heatbed
  M104 S0 ; turn off temperature
  M107 ; turn off fan
  M84 X Y E ; disable motors


[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


[gcode_macro CLEAN_NOZZLE]
variable_start_x: 248
variable_start_y: 18
variable_start_z: 3
variable_wipe_dist_y: -15
variable_wipe_qty: 2
variable_wipe_spd: 500
variable_raise_distance: 18

gcode:
  #M104 S150 ; set temporary nozzle temp to prevent oozing during homing
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
  
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   #WIPE RIGHT
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z 20 F2000
 G1 Y 40 F2000


 #####################################################################
#   Nozzle Deep Cleaner
#####################################################################

[gcode_macro DEEP_CLEAN_NOZZLE]
variable_start_x: 248
variable_start_y: 18
variable_start_z: 2
variable_wipe_dist_y: -15
variable_wipe_qty: 6
variable_wipe_spd: 500
variable_raise_distance: 18

gcode:
  #M104 S150 ; set temporary nozzle temp to prevent oozing during homing
 {% if "xyz" not in printer.toolhead.homed_axes %}
   G28
 {% endif %}
  #M109 S150
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 Z{start_z} F1500
  G1 X{start_x} Y{start_y} F6000

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x + 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   #WIPE RIGHT
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y - wipe_dist_y} F{wipe_spd * 30}
   G1 X{start_x - 2} Y{start_y + wipe_dist_y} F{wipe_spd * 30}
   
 {% endfor %}

 ## Raise nozzle after complete
 G1 Z 5
 G1 Y 40


 [gcode_macro _check_fan_params]
gcode:
  {% set MAXIMUM = params.MAXIMUM|default(
      printer["gcode_macro set_fan_scaling"].maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(
      printer["gcode_macro set_fan_scaling"].minimum)|int %}

  {% if params.SCALE and params.SCALE|float <= 0 %}
    { action_raise_error("SCALE must be a positive value.") }
  {% elif MINIMUM < 0 or MINIMUM > 255 %}
    { action_raise_error("MINIMUM must be between 0 and 255.") }
  {% elif MAXIMUM < 0 or MAXIMUM > 255 %}
    { action_raise_error("MAXIMUM must be between 0 and 255.") }
  {% elif params.SPEED and (params.SPEED|int < 0 or params.SPEED|int > 255) %}
    { action_raise_error("SPEED must be between 0 and 255.") }
  {% elif params.BOOST and (params.BOOST|int < 0 or params.BOOST|int > 255) %}
    { action_raise_error("BOOST must be between 0 and 255.") }
  {% elif MINIMUM > MAXIMUM %}
    { action_raise_error("MINIMUM must be less than or equal to MAXIMUM.") }
  {% endif %}

# Sets optional scaling factor, minimum, and maximum applied to M106 commmand.
# If a MINIMUM greater than 0 is specified the fan will not stop unless an
# M107 command is issued. SET_FAN_SCALING always displays the current paramaters
# if scaling is active. SET_FAN_SCALING without any arguments will display the
# current scaling parameters without changing them.
[gcode_macro set_fan_scaling]
description: Sets fan scaling factors applied to M106 command. If a speed is
  provided it will be adjusted according to the scaling parameters.
  Usage: SET_FAN_SCALING [SCALE=<scale>] [BOOST=<boost>] [MAXIMUM=<max>]
                         [MINIMUM=<min>] [SPEED=<speed>]
variable_scale: 1.0
variable_boost: 0
variable_minimum: 0
variable_maximum: 255
variable_real_speed: 0
gcode:
  _CHECK_FAN_PARAMS{% for k in params %}{' '~k~'='~params[k]}{% endfor %}
  {% set SCALE = params.SCALE|default(scale)|float %}
  {% set BOOST = params.BOOST|default(boost)|float %}
  {% set MAXIMUM = params.MAXIMUM|default(maximum)|int %}
  {% set MINIMUM = params.MINIMUM|default(minimum)|int %}
  {% set SPEED = params.SPEED|default(real_speed)|int %}

  {% if SCALE != 1.0 or BOOST != 0 or MAXIMUM != 255 or MINIMUM != 0 %}
    {action_respond_info("Fan: Scale: %.2f Minimum:%i Maximum: %i Speed: %i"|
                         format(SCALE, MINIMUM, MAXIMUM, SPEED))}
  {% endif %}

  # Update parameters on change.
  {% if params|length > 0 %}
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=scale VALUE="{SCALE}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=boost VALUE="{BOOST}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=minimum VALUE="{MINIMUM}"
    SET_GCODE_VARIABLE MACRO=set_fan_scaling VARIABLE=maximum VALUE="{MAXIMUM}"
    # Run fan at adusted speed
    M106 S{SPEED}
  {% endif %}
  # Dummy argument block for Mainsail
  {% set dummy = None if True else "
  {% set dummy = params.SCALE|default(1.0)|float %}
  {% set dummy = params.BUMP|default(0)|int %}
  {% set dummy = params.MAXIMUM|default(255)|int %}
  {% set dummy = params.MINIMUM|default(0)|int %}
  {% set dummy = params.SPEED|default(current speed)|int %}
  " %} # End argument block for Mainsail

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True